<?php

namespace api\common\models\iiko;

use common\models\Organization;
use Yii;
use yii\db\Expression;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "iiko_agent".
 *
 * @property integer $id
 * @property string $uuid
 * @property integer $org_id
 * @property string $denom
 * @property integer $is_active
 * @property string $comment
 * @property string $created_at
 * @property string $updated_at
 * @property integer $payment_delay
 */
class iikoAgent extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'iiko_agent';
    }

    /**
     * @return \yii\db\Connection the database connection used by this AR class.
     */
    public static function getDb()
    {
        return Yii::$app->get('db_api');
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['uuid', 'org_id'], 'required'],
            [['org_id', 'is_active', 'store_id', 'vendor_id', 'payment_delay'], 'integer'],
            [['created_at', 'updated_at'], 'safe'],
            [['uuid'], 'string', 'max' => 36],
            [['denom', 'comment'], 'string', 'max' => 250]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'uuid' => Yii::t('app', 'Uuid'),
            'org_id' => Yii::t('app', 'Org ID'),
            'denom' => Yii::t('app', 'Denom'),
            'is_active' => Yii::t('app', 'Is Active'),
            'comment' => Yii::t('app', 'Comment'),
            'created_at' => Yii::t('app', 'Created At'),
            'updated_at' => Yii::t('app', 'Updated At'),
            'payment_delay' => Yii::t('app', 'Payment delay in days'),
        ];
    }

    public function beforeSave($insert)
    {
        if ($insert) {
            $this->created_at = Yii::$app->formatter->asDate(time(), 'yyyy-MM-dd HH:mm:ss');
        }

        $this->updated_at = Yii::$app->formatter->asDate(time(), 'yyyy-MM-dd HH:mm:ss');

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }


    public function getStore()
    {
        return $this->hasOne(iikoStore::className(), ['id' => 'store_id']);
    }


    public function getVendor()
    {
        return $this->hasOne(Organization::className(), ['id' => 'vendor_id']);
    }


    public function getOrganization()
    {
        return $this->hasOne(Organization::className(), ['id' => 'org_id']);
    }

    /**
     * get list of agents
     *
     * @return array
     */
    public static function getAgents($org_id, $all = true, $notMap = true, $is_active = true)
    {
        $query = iikoAgent::find()->select(['uuid', 'denom'])->where(['org_id' => $org_id]);

        if ($is_active) {
            $query->andWhere(['is_active' => 1]);
        }

        if ($notMap) {
            $agents = ArrayHelper::map($query->orderBy(['denom' => SORT_ASC])
                ->asArray()
                ->all(), 'uuid', 'denom');
        } else {
            $agents = $query->orderBy(['denom' => SORT_ASC])
                ->asArray()
                ->all();
        }

        if ($all) {
            $agents[''] = '';
        }
        ksort($agents);
        return $agents;
    }
}
