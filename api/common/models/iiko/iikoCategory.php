<?php

namespace api\common\models\iiko;

use common\models\Organization;
use Yii;
use yii\db\Expression;

/**
 * This is the model class for table "{{%iiko_category}}".
 *
 * @property integer $id
 * @property string $uuid
 * @property string $parent_uuid
 * @property string $denom
 * @property string $group_type
 * @property integer $org_id
 * @property integer $is_active
 * @property string $created_at
 * @property string $updated_at
 */
class iikoCategory extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return '{{%iiko_category}}';
    }

    /**
     * @return \yii\db\Connection the database connection used by this AR class.
     */
    public static function getDb()
    {
        return Yii::$app->get('db_api');
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['uuid', 'denom', 'org_id'], 'required'],
            [['org_id', 'is_active'], 'integer'],
            [['created_at', 'updated_at'], 'safe'],
            [['uuid', 'parent_uuid'], 'string', 'max' => 36],
            [['denom', 'group_type'], 'string', 'max' => 250],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'uuid' => Yii::t('app', 'uuid'),
            'parent_uuid' => Yii::t('app', 'Parent Uuid'),
            'denom' => Yii::t('app', 'Имя'),
            'group_type' => Yii::t('app', 'Тип'),
            'org_id' => Yii::t('app', 'Организация'),
            'is_active' => Yii::t('app', 'Активен'),
            'created_at' => Yii::t('app', 'Создана'),
            'updated_at' => Yii::t('app', 'Обновлена'),
        ];
    }

    public function beforeSave($insert)
    {
        $this->updated_at = new Expression('NOW()');

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getOrganization() {
        return $this->hasOne(Organization::className(), ['id' => 'org_id']);
    }
}
