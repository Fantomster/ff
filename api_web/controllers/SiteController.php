<?php

namespace api_web\controllers;

use api_web\components\WebApi;
use Yii;
use yii\web\Controller;
use frontend\modules\billing\models\BillingPayment;
use frontend\modules\billing\providers\Yandex;

/**
 * Class SiteController
 * @package api_web\controllers
 */
class SiteController extends Controller
{

    public function actions()
    {
        return [
            'doc' => [
                'class' => \api_web\components\MySwaggerAction::className(),
                'restUrl' => \yii\helpers\Url::to(['/site/api'], true),
            ],
            'api' => [
                'class' => 'light\swagger\SwaggerApiAction',
                'scanDir' => [
                    Yii::getAlias('@api_web/components/WebApiController.php'),
                    Yii::getAlias('@api_web/components/UserWebApiDefinition.php'),
                    Yii::getAlias('@api_web/controllers/UserController.php'),
                    Yii::getAlias('@api_web/controllers/MarketController.php'),
                    Yii::getAlias('@api_web/controllers/PaymentController.php'),
                    Yii::getAlias('@api_web/controllers/CartController.php'),
                    Yii::getAlias('@api_web/controllers/OrderController.php'),
                    Yii::getAlias('@api_web/controllers/VendorController.php'),
                    Yii::getAlias('@api_web/controllers/GuideController.php'),
                    Yii::getAlias('@api_web/controllers/ChatController.php'),
                    Yii::getAlias('@api_web/controllers/RequestController.php')
                ],
                'cache' => 'cache',
                'cacheKey' => 'api-web-swagger-cache'
            ],
        ];
    }

    public function beforeAction($action)
    {
        if ($action->id == 'payment-confirm') {
            \Yii::$app->request->enableCsrfCookie = false;
            \Yii::$app->request->enableCsrfValidation = false;
            \Yii::$app->request->enableCookieValidation = false;
            $this->enableCsrfValidation = false;
        }

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actionIndex()
    {
        return $this->render('index');
    }

    public function actionPaymentConfirm()
    {
        try {
            /**
             * @var Yandex $provider
             */
            $provider = (new \frontend\modules\billing\Module('billing'))->getProvider();
            if (!$provider->isProviderRequest()) {
                throw new \Exception('Request Provider no allow This IP:' . \Yii::$app->request->getUserIP());
            }

            $notification = \Yii::$app->request->getRawBody();
            if (empty($notification)) {
                throw new \Exception('empty Body in Request');
            }

            $notification = \GuzzleHttp\json_decode($notification, true);
            $transaction = Yii::$app->db->beginTransaction();
            try {
                $external_id = $notification['object']['id'];
                $payment = BillingPayment::findOne(['external_payment_id' => $external_id]);
                if (empty($payment)) {
                    throw new \Exception("Payment not found " . \Yii::$app->request->getRawBody());
                }
                $payment->checkProvider($provider);
                $provider->confirmPayment($payment);
                $transaction->commit();
                \Yii::$app->response->setStatusCode(200);
                \Yii::$app->response->send();
            } catch (\Exception $e) {
                $transaction->rollBack();
                throw $e;
            }
        } catch (\Exception $e) {
            $i = [
                $e->getMessage(),
                date('d.m.Y H:i:s'),
                \Yii::$app->request->getUserIP(),
                PHP_EOL
            ];
            file_put_contents($_SERVER['DOCUMENT_ROOT'] . '/notification_error.txt', implode(' | ', $i), FILE_APPEND);
            \Yii::$app->response->data = \GuzzleHttp\json_encode(['error' => $e->getMessage()]);
            \Yii::$app->response->setStatusCode(401);
            \Yii::$app->response->send();
        }
    }
}
