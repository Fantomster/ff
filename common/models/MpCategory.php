<?php

namespace common\models;

use common\models\search\OrderCatalogSearch;
use market\components\ImagesHelper;
use Yii;
use yii\helpers\ArrayHelper;
use common\behaviors\SluggableBehavior;

/**
 * This is the model class for table "mp_category".
 *
 * @property integer $id
 * @property string $name
 * @property string $title
 * @property string $text
 * @property string $description
 * @property string $keywords
 * @property integer $parent
 *
 * @property MpCategory $parentCategory
 */
class MpCategory extends \yii\db\ActiveRecord
{

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'mp_category';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['name'], 'required'],
            [['parent'], 'integer'],
            [['name', 'title'], 'string', 'max' => 255],
            [['name', 'title', 'text', 'description', 'keywords'], 'filter', 'filter' => '\yii\helpers\HtmlPurifier::process'],
        ];
    }

    public function behaviors()
    {
        return [
            'slug' => [
                'class' => SluggableBehavior::className(),
                'attribute' => 'name',
                'slugAttribute' => 'slug',
                'transliterator' => 'Russian-Latin/BGN; NFKD',
                //Set this to true, if you want to update a slug when source attribute has been changed
                'forceUpdate' => true,
                'ensureUnique' => true,
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => Yii::t('app', 'common.models.category_mp', ['ru' => 'Категория']) . ' (MP)',
            'parent' => 'Parent',
        ];
    }

    public function __get($name)
    {
        if ($name == 'name') {
            return Yii::t('app', $this->getAttribute($name));
        }

        return parent::__get($name); // TODO: Change the autogenerated stub
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getChild()
    {
        return $this->hasMany(MpCategory::className(), ['parent' => 'id']);
    }

    /**
     * @param null $vendor_id
     * @param null $client_id
     * @return int
     */
    public function getProductCount($vendor_id = null, $client_id = null)
    {
        $searchModel = new OrderCatalogSearch();
        $searchModel->searchCategory = [$this->id];

        if (!empty($vendor_id)) {
            $searchModel->selectedVendor = $vendor_id;
        }

        if (!empty($client_id)) {
            $client = Organization::findOne($client_id);
            $vendors = $client->getSuppliers('', false);
            $catalogs = $vendors ? $client->getCatalogs(null) : "(0)";
            $searchModel->client = $client;
            $searchModel->catalogs = $catalogs;
        }

        $dataProvider = $searchModel->search(['page' => 1, 'pageSize' => 0]);

        return (int)$dataProvider->totalCount;
    }

    /**
     * @param null $vendor_id
     * @param null $client_id
     * @return int
     */
    public static function getProductCountWithOutCategory($vendor_id = null, $client_id = null)
    {
        $searchModel = new OrderCatalogSearch();
        $searchModel->searchCategory = 0;

        if (!empty($vendor_id)) {
            $searchModel->selectedVendor = $vendor_id;
        }

        if (!empty($client_id)) {
            $client = Organization::findOne($client_id);
            $vendors = $client->getSuppliers('', false);
            $catalogs = $vendors ? $client->getCatalogs(null) : "(0)";
            $searchModel->client = $client;
            $searchModel->catalogs = $catalogs;
        }

        $dataProvider = $searchModel->search(['page' => 1, 'pageSize' => 0]);
        return (int)$dataProvider->totalCount;
    }

    /**
     * @param $id
     * @return int|string
     */
    public static function getCountProduct($id)
    {
        return (int)CatalogBaseGoods::find()->where(["category_id" => $id])->count();
    }

    public static function getCategory($id)
    {
        $cat = Yii::t('app', MpCategory::find()->where(["id" => $id])->one()->name);
        return $cat;
    }

    public static function allCategory()
    {
        $mp_ed = ArrayHelper::map(MpCategory::find()->all(), 'id', 'name');
        foreach ($mp_ed as &$item) {
            $item = Yii::t('app', $item);
        }
        return $mp_ed;
    }

    public function getParentCategory()
    {
        return MpCategory::find()->where(["id" => $this->parent])->one();
    }
}
