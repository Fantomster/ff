<?php

namespace common\models;

use api\common\models\merc\MercVsd;
use Yii;
use yii\behaviors\TimestampBehavior;

/**
 * This is the model class for table "waybill_content".
 *
 * @property int     $id
 * @property int     $waybill_id
 * @property int     $order_content_id
 * @property int     $outer_product_id
 * @property double  $quantity_waybill
 * @property double  $vat_waybill
 * @property string  $merc_uuid
 * @property int     $sum_with_vat
 * @property int     $sum_without_vat
 * @property int     $price_with_vat
 * @property int     $price_without_vat
 * @property int     $outer_unit_id
 * @property int     $koef
 * @property OrderContent $orderContent
 * @property OuterProduct $productOuter
 * @property Waybill $waybill
 */
class WaybillContent extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'waybill_content';
    }

    /**
     * @return \yii\db\Connection the database connection used by this AR class.
     */
    public static function getDb()
    {
        return Yii::$app->get('db_api');
    }

    /**
     * @return array
     */
    public function behaviors()
    {
        return [
            [
                'class'              => TimestampBehavior::class,
                'createdAtAttribute' => 'created_at',
                'updatedAtAttribute' => 'updated_at',
                'value'              => \gmdate('Y-m-d H:i:s'),
            ],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['waybill_id'], 'required'],
            [['waybill_id', 'order_content_id', 'outer_product_id', 'outer_unit_id'], 'integer'],
            [['sum_with_vat', 'sum_without_vat', 'price_with_vat', 'price_without_vat', 'quantity_waybill', 'vat_waybill', 'koef'], 'number'],
            [['merc_uuid'], 'string', 'max' => 255],
            [['created_at', 'updated_at'], 'safe'],
            [['waybill_id'], 'exist', 'skipOnError' => true, 'targetClass' => Waybill::className(), 'targetAttribute' => ['waybill_id' => 'id']],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id'               => 'ID',
            'waybill_id'       => 'Waybill ID',
            'order_content_id' => 'Order Content ID',
            'outer_product_id' => 'Product Outer ID',
            'quantity_waybill' => 'Quantity Waybill',
            'vat_waybill'      => 'Vat Waybill',
            'merc_uuid'        => 'Merc Uuid',
            'unload_status'    => 'Unload Status',
            'koef'             => 'Коэффициент',
            'outer_unit_id'    => 'ID единицы измерения'
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getWaybill()
    {
        return $this->hasOne(Waybill::className(), ['id' => 'waybill_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     * */
    public function getMercVsd()
    {
        return $this->hasOne(MercVsd::className(), ['uuid' => 'merc_uuid']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getOrderContent()
    {
        return $this->hasOne(OrderContent::className(), ['id' => 'order_content_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProductOuter()
    {
        return $this->hasOne(OuterProduct::className(), ['id' => 'outer_product_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getOuterUnit()
    {
        return $this->hasOne(OuterUnit::className(), ['id' => 'outer_unit_id']);
    }

    public function beforeSave($insert)
    {
        $dirtyAttr = $this->getDirtyAttributes();

        if (array_key_exists('price_without_vat', $dirtyAttr)) {
            $this->price_with_vat = $this->price_without_vat * ((100 + ($this->vat_waybill ?? 0)) /100);
            $this->refreshSum();
        }

        if (array_key_exists('quantity_waybill', $dirtyAttr)) {
            $this->refreshSum();
        }

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function refreshSum()
    {
        $this->sum_with_vat = $this->quantity_waybill * $this->price_with_vat;
        $this->sum_without_vat = $this->quantity_waybill * $this->price_without_vat;
    }
}
