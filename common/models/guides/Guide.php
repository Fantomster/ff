<?php

namespace common\models\guides;

use common\models\CatalogGoodsBlocked;
use Yii;
use common\models\Organization;
use yii\db\Expression;
use yii\helpers\HtmlPurifier;

/**
 * This is the model class for table "guide".
 *
 * @property integer $id
 * @property integer $client_id
 * @property integer $type
 * @property string $name
 * @property integer $deleted
 * @property string $created_at
 * @property string $updated_at
 * @property string $color
 *
 * @property Organization $client
 * @property GuideProduct[] $guideProducts
 * @property integer $productCount
 * @property integer[] $guideProductsIds
 */
class Guide extends \yii\db\ActiveRecord
{

    const TYPE_FAVORITE = 1;
    const TYPE_GUIDE    = 2;

    public static $COLORS = [
        "D81B60",
        "8E24AA",
        "D81B60",
        "8E24AA",
        "5E35B1",
        "5C6BC0",
        "039BE5",
        "009688",
        "C0CA33",
        "FFD600",
        "FB8C00",
        "F4511E",
        "D32F2F",
        "A1887F",
        "5D4037",
        "BDBDBD",
        "757575",
        "000000"];

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'guide';
    }

    function __get($name)
    {
        if ($name == 'name') {
            return htmlspecialchars_decode(parent::__get($name));
        }

        return parent::__get($name); // TODO: Change the autogenerated stub
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['client_id', 'type', 'name'], 'required'],
            [['client_id', 'type', 'deleted'], 'integer'],
            [['created_at', 'updated_at'], 'safe'],
            [['name', 'color'], 'string', 'max' => 255],
            [['name'], 'filter', 'filter' => '\yii\helpers\HtmlPurifier::process'],
            ['color', 'custom_validate_color'],
            [['client_id'], 'exist', 'skipOnError' => true, 'targetClass' => Organization::className(), 'targetAttribute' => ['client_id' => 'id']],
        ];
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        return [
            'timestamp' => [
                'class' => 'yii\behaviors\TimestampBehavior',
                'value' => function ($event) {
                    return gmdate("Y-m-d H:i:s");
                },
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id'         => Yii::t('app', 'ID'),
            'client_id'  => Yii::t('app', 'Client ID'),
            'type'       => Yii::t('app', 'Type'),
            'name'       => Yii::t('app', 'Name'),
            'deleted'    => Yii::t('app', 'Deleted'),
            'created_at' => Yii::t('app', 'Created At'),
            'updated_at' => Yii::t('app', 'Updated At'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getClient()
    {
        return $this->hasOne(Organization::className(), ['id' => 'client_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getGuideProducts()
    {
        if (isset($this->client_id)) {
            $blockedItems = implode(",", CatalogGoodsBlocked::getBlockedList($this->client_id));
            return $this->hasMany(GuideProduct::className(), ['guide_id' => 'id'])->andWhere(["AND", "cbg_id not in ($blockedItems)"]);
        }
        return $this->hasMany(GuideProduct::className(), ['guide_id' => 'id']);
    }

    /**
     * @return integer[]
     */
    public function getGuideProductsIds()
    {
        $blockedItems = implode(",", CatalogGoodsBlocked::getBlockedList($this->client_id));
        $query        = (new \yii\db\Query)->select('cbg_id')->where(['guide_id' => $this->id])->from(GuideProduct::tableName())
                        ->andWhere(["AND", "cbg_id not in ($blockedItems)"])
                        ->orderBy(['id' => 'desc'])->createCommand()->queryColumn();
        return array_map('intval', $query);
    }

    /**
     * @return integer
     */
    public function getProductCount()
    {
        $blockedItems = implode(",", CatalogGoodsBlocked::getBlockedList($this->client_id));
        return GuideProduct::find()->where(['guide_id' => $this->id])->andWhere(["AND", "cbg_id not in ($blockedItems)"])->count();
    }

    /**
     * Валидация цвета
     */
    public function custom_validate_color()
    {
        $allow_color = [
            "D81B60",
            "8E24AA",
            "5E35B1",
            "5C6BC0",
            "039BE5",
            "009688",
            "C0CA33",
            "FFD600",
            "FB8C00",
            "F4511E",
            "D32F2F",
            "A1887F",
            "5D4037",
            "BDBDBD",
            "757575",
            "000000"
        ];

        $this->color = mb_strtoupper(ltrim(trim($this->color), '#'));

        if (strlen($this->color) != 6) {
            $this->addError('color', 'the field is not equal to 6 characters, please pass a value in HEX');
        }

        if (!in_array($this->color, $allow_color)) {
            $this->addError('color',
                    'This color is forbidden to the selection, a list of available colors: '
                    . implode(', ', $allow_color)
            );
        }
    }

    public function delete()
    {
        GuideProduct::deleteAll(['guide_id' => $this->id]);
        parent::delete();
    }

    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes);
        if (!is_a(Yii::$app, 'yii\console\Application')) {
//            \api\modules\v1\modules\mobile\components\NotificationHelper::actionGuide($this->id); 
        }
    }

    /**
     * @param int|array $organizationIds
     * @return bool
     */
    public function copyTo($organizationIds)
    {
        if (!is_array($organizationIds)) {
            $idList[] = $organizationIds;
        } else {
            $idList = $organizationIds;
        }
        $transaction = \Yii::$app->db->beginTransaction();
        try {
            $tblGP = GuideProduct::tableName();
            foreach ($idList as $id) {
                $client = Organization::findOne(['id' => $id]);
                if (empty($client) || ($client->type_id !== Organization::TYPE_RESTAURANT)) {
                    throw new \Exception("Organization $id is not a restaurant!");
                }

                echo $id . PHP_EOL;

                $newGuide            = new Guide();
                $newGuide->client_id = $id;
                $newGuide->name      = $this->name;
                $newGuide->type      = Guide::TYPE_GUIDE;
                $newGuide->color     = $this->color;
                $newGuide->save();

                $subQuery = (new \yii\db\Query())
                        ->select([
                            "guide_id"    => new Expression("$newGuide->id"),
                            "cbg_id"      => "cbg_id",
                            "created_at"  => new Expression("NOW()"),
                            "updated_at"  => new Expression("NOW()"),
                            "currency_id" => "currency_id"
                        ])
                        ->from($tblGP)
                        ->where(["guide_id" => $this->id]);

                \Yii::$app->db->createCommand()
                        ->insert($tblGP, $subQuery)
                        ->execute();
            }
            $transaction->commit();
        } catch (\Exception $e) {
            $transaction->rollBack();
            \Yii::error($e->getMessage() . PHP_EOL . $e->getTraceAsString());
            return false;
        }
        return true;
    }

}
