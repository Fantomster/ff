<?php

namespace frontend\modules\clientintegr\modules\merc\controllers;

use api\common\models\merc\mercDicconst;
use api\common\models\merc\mercService;
use api\common\models\merc\MercStockEntry;
use api\common\models\merc\MercVisits;
use api\common\models\merc\search\mercProductSearch;
use api\common\models\merc\search\mercStockEntrySearch;
use common\models\vetis\VetisProductItem;
use console\modules\daemons\classes\MercStoreEntryList;
use frontend\modules\clientintegr\modules\merc\helpers\api\cerber\cerberApi;
use frontend\modules\clientintegr\modules\merc\helpers\api\mercury\getStockEntry;
use frontend\modules\clientintegr\modules\merc\helpers\api\mercury\LoadStockEntryList;
use frontend\modules\clientintegr\modules\merc\helpers\api\mercury\Mercury;
use frontend\modules\clientintegr\modules\merc\helpers\api\mercury\mercuryApi;
use frontend\modules\clientintegr\modules\merc\models\createStoreEntryForm;
use frontend\modules\clientintegr\modules\merc\models\dateForm;
use frontend\modules\clientintegr\modules\merc\models\expiryDate;
use frontend\modules\clientintegr\modules\merc\models\inputDate;
use frontend\modules\clientintegr\modules\merc\models\productForm;
use frontend\modules\clientintegr\modules\merc\models\productionDate;
use frontend\modules\clientintegr\modules\merc\models\rejectedForm;
use Yii;
use common\components\AccessRule;
use yii\filters\AccessControl;
use common\models\Role;

class ProductController extends \frontend\modules\clientintegr\controllers\DefaultController
{
    public $enableCsrfValidation = false;
    protected $authenticated = false;

    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                // We will override the default rule config with the new AccessRule class
                'ruleConfig' => [
                    'class' => AccessRule::className(),
                ],
                'rules' => [
                    [
                        'allow' => false,
                        // Allow restaurant managers
                        'roles' => [
                            Role::ROLE_RESTAURANT_BUYER,
                            Role::ROLE_RESTAURANT_JUNIOR_BUYER,
                        ],
                    ],
                    [
                        'allow' => TRUE,
                        'roles' => ['@'],
                    ],

                ],
            ],
        ];
    }

    public function beforeAction($action)
    {
        $lic = mercService::getLicense();

        if (!isset($lic) && ($this->getRoute() != 'clientintegr/merc/default/nolic')) {
            $this->redirect(['nolic']);
            return false;
        }

        if (!mercDicconst::checkSettings()) {
            $this->redirect(['/clientintegr/merc/settings']);
            return false;
        }

        if ($action->actionMethod == 'actionIndex') {
            VetisProductItem::getUpdateData(0);
        }
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actionIndex()
    {
        $lic = mercService::getLicense();
        $searchModel = new mercProductSearch();
        $dataProvider = $searchModel->search(Yii::$app->request->queryParams);
        $params = ['searchModel' => $searchModel,
            'dataProvider' => $dataProvider,
            'lic' => $lic];

        if (Yii::$app->request->isPjax) {
            return $this->renderPartial('index', $params);
        } else {
            return $this->render('index', $params);
        }
    }

    public function actionNolic()
    {
        return $this->render('/default/_nolic');
    }

    public function actionView($uuid)
    {
        $model = VetisProductItem::findOne(['uuid' => $uuid]);
        $params = ['model' => $model];
        if (Yii::$app->request->isAjax) {
            return $this->renderAjax('_ajaxView', $params);
        } else {
            return $this->render('view', $params);
        }
    }

    public function actionCreate()
    {
        $model = new productForm();
        if ($model->load(Yii::$app->request->post()) && $model->validate()) {
            if (!Yii::$app->request->isAjax) {
                //try {
                    $result = mercuryApi::getInstance()->modifyProducerStockListOperation('CREATE', null, $model);
                    if (!isset($result)) {
                        throw new \Exception('Error create Product');
                    }

                    Yii::$app->session->setFlash('success', 'Позиция добавлена в номенклатуру!');
                    return $this->redirect(['index']);
                /*} catch (\Error $e) {
                    Yii::$app->session->setFlash('error', $this->getErrorText($e));
                    return $this->redirect(['index']);
                } catch (\Exception $e) {
                    Yii::$app->session->setFlash('error', $this->getErrorText($e));
                    return $this->redirect(['index']);
                }*/
            }
        }
        $params = ['model' => $model];
        if (Yii::$app->request->isAjax) {
            return $this->renderAjax('_form', $params);
        } else {
            return $this->render('create', $params);
        }
    }

    public function actionUpdate($uuid)
    {
        $product = VetisProductItem::findOne(['uuid' => $uuid, 'last' => true, 'active' => true]);
        if(is_null($product)) {
            Yii::$app->session->setFlash('error', 'Позиция не найдена или не активна!');
            return $this->redirect(['index']);
        }
        $model = new productForm();
        $model->setAttributes($product->attributes);
        if ($model->load(Yii::$app->request->post()) && $model->validate()) {
            if (!Yii::$app->request->isAjax) {
                try {
                    $result = mercuryApi::getInstance()->modifyProducerStockListOperation('UPDATE', $uuid, $model);
                    if (!isset($result)) {
                        throw new \Exception('Error update Product');
                    }

                    Yii::$app->session->setFlash('success', 'Позиция изменена!');
                    return $this->redirect(['index']);
                } catch (\Error $e) {
                    Yii::$app->session->setFlash('error', $this->getErrorText($e));
                    return $this->redirect(['index']);
                } catch (\Exception $e) {
                    Yii::$app->session->setFlash('error', $this->getErrorText($e));
                    return $this->redirect(['index']);
                }
            }
        }
        $params = ['model' => $model];
        if (Yii::$app->request->isAjax) {
            return $this->renderAjax('_form', $params);
        } else {
            return $this->render('update', $params);
        }
    }

    public function actionDelete($uuid)
    {
       try {
            $result = mercuryApi::getInstance()->modifyProducerStockListOperation('DELETE', $uuid);
            if (!isset($result)) {
                throw new \Exception('Error delete Product');
            }

            Yii::$app->session->setFlash('success', 'Позиция удалена из номенклатуры!');
            return $this->redirect(['index']);
        } catch (\Error $e) {
            Yii::$app->session->setFlash('error', $this->getErrorText($e));
            return $this->redirect(['index']);
        } catch (\Exception $e) {
            Yii::$app->session->setFlash('error', $this->getErrorText($e));
            return $this->redirect(['index']);
        }
    }

    private function getErrorText($e)
    {
        if ($e->getCode() == 600) {
            return "При обращении к api Меркурий возникла ошибка. Ошибка зарегистрирована в журнале за номером №" . $e->getMessage() . ". Если ошибка повторяется обратитесь в техническую службу.";
        } else {
            return "При обращении к api Меркурий возникла ошибка. Если ошибка повторяется обратитесь в техническую службу.";

        }
    }
}
