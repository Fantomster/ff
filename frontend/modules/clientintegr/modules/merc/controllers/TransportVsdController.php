<?php

namespace frontend\modules\clientintegr\modules\merc\controllers;

use api\common\models\merc\mercDicconst;
use api\common\models\merc\mercService;
use frontend\modules\clientintegr\modules\merc\helpers\MultiModel;
use frontend\modules\clientintegr\modules\merc\models\TransportVsd;
use Yii;
use yii\bootstrap\ActiveForm;
use yii\web\Response;

class TransportVsdController extends \frontend\modules\clientintegr\controllers\DefaultController
{
    public $enableCsrfValidation = false;
    protected $authenticated = false;

    public function beforeAction($action)
    {
        $lic = mercService::getLicense();

        if (!isset($lic) && ($this->getRoute() != 'clientintegr/merc/default/nolic')) {
            $this->redirect(['nolic']);
            return false;
        }

        if (!mercDicconst::checkSettings()) {
            $this->redirect(['/clientintegr/merc/settings']);
            return false;
        }

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actionNolic()
    {
        return $this->render('/default/_nolic');
    }


    public function actionStep1()
    {
        $session = Yii::$app->session;
        if(Yii::$app->request->isGet) {
            $get = Yii::$app->request->get();
            if (isset($get['selected'])) {
                $selected = Yii::$app->request->get('selected');
                $session->remove('store_entry_list');
            }
        }
        else {
            $post = Yii::$app->request->post('TransportVsd');
            $res = [];
            foreach ($post as $item)
            {
                $res[] = $item['id'];
            }
            $selected = implode(",", $res);
        }

            $list = TransportVsd::find()->where("id in ($selected)")->all();
        if (MultiModel::loadMultiple($list, Yii::$app->request->post()) && empty(ActiveForm::validateMultiple($list))) {
            $attributes = [];
            foreach ($list as $item)
            {
                $attributes[$item->id] = $item->getAttributes(['product_name','select_amount']);
            }
                $session->set('store_entry_list', $attributes);
                if (Yii::$app->request->isAjax) {
                    Yii::$app->response->format = Response::FORMAT_JSON;
                    return (['success' => true]);
                }
                return $this->redirect(['step-2']);

        }

        if (Yii::$app->request->isAjax)
            return $this->renderAjax('step-1', ['list' => $list]);
        return $this->render('step-1', ['list' => $list]);
    }

    public function actionStep2()
    {
        var_dump(2);
        exit();
    }

    private function getErrorText($e)
    {
        if ($e->getCode() == 600)
            return "При обращении к api Меркурий возникла ошибка. Ошибка зарегистрирована в журнале за номером №" . $e->getMessage() . ". Если ошибка повторяется обратитесь в техническую службу.";
        else
            return "При обращении к api Меркурий возникла ошибка. Если ошибка повторяется обратитесь в техническую службу.";
    }
}
