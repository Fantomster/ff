<?php
namespace frontend\modules\clientintegr\modules\merc\helpers\api\dicts;

use frontend\modules\clientintegr\modules\merc\helpers\api\baseApi;
use Yii;
use yii\db\Exception;

class dictsApi extends baseApi
{

    public function init()
    {
        $load = new Dicts();
        $this->system = 'dicts';
        $this->wsdlClassName = Dicts::class;
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function setMode($mode)
    {
        $this->mode = $mode;
    }

    public function getPurposeByGuid ($GUID)
    {
        $purpose = \common\models\vetis\VetisPurpose::findOne(['guid' => $GUID]);

        if(!empty($purpose)) {
            return $purpose;
        }

        $client = $this->getSoapClient('dicts');
        $request = new getPurposeByGuidRequest();
        $request->guid = $GUID;
        $result = $client->GetPurposeByGuid($request);

        return $result;
    }

    public function getUnitByGuid ($GUID)
    {
        $unit = \common\models\vetis\VetisUnit::findOne(['guid' => $GUID]);

        if(!empty($unit)) {
            return $unit;
        }

        $client = $this->getSoapClient('dicts');

        $request = new getUnitByGuidRequest();
        $request->guid = $GUID;
        //var_dump($client->soapClient); die();
        $result = $client->GetUnitByGuid($request);

        return $result;
    }

    public function getUnitList ($options)
    {
        if($this->mode == self::GET_USERDATA) {
            $units = \common\models\vetis\VetisUnit::findAll(['active' => 1, 'last' => 1]);

            if (!empty($units)) {
                return $units;
            }

          return null;
        }

        $request = new getUnitListRequest();
        if(array_key_exists('listOptions', $options)) {
            $request->listOptions = $options['listOptions'];
        }
        return $request;
    }

    public function getUnitChangesList ($options)
    {
        $request = new getUnitChangesListRequest();
        if(array_key_exists('listOptions', $options)) {
            $request->listOptions = $options['listOptions'];
        }

        if(!array_key_exists('listOptions', $options)) {
            throw new Exception('startDate field is not specified');
        }

        $request->updateDateInterval = new DateInterval();
        $request->updateDateInterval->beginDate = date('Y-m-d', strtotime($options['startDate'])) . 'T' . date('H:i:s',strtotime($options['startDate']));
        $request->updateDateInterval->endDate = date('Y-m-d') . 'T' . date('H:i:s') . '+03:00';

        return $request;
    }

    public function getPurposeList ($listOptions)
    {
        if($this->mode == self::GET_USERDATA) {
            $units = \common\models\vetis\VetisUnit::findAll(['active' => 1, 'last' => 1]);

            if (!empty($units)) {
                return $units;
            }

            return null;
        }

        $client = $this->getSoapClient('dicts');
        $request = new getPurposeListRequest();
        if(isset($listOptions)) {
            $request->listOptions = $listOptions;
        }
        $result = $client->GetPurposeList($request);

        return $result;
    }

    public function getPurposeChangeList ($listOptions)
    {
        $client = $this->getSoapClient('dicts');

        $request = new getPurposeListRequest();
        if(isset($listOptions)) {
            $request->listOptions = $listOptions;
        }
        $result = $client->GetPurposeList($request);

        return $result;
    }
}