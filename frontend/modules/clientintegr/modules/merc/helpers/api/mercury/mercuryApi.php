<?php
namespace frontend\modules\clientintegr\modules\merc\helpers\api\mercury;

use frontend\modules\clientintegr\modules\merc\helpers\api\baseApi;
use Yii;

class mercuryApi extends baseApi
{
   public function init()
   {
       $load = new Mercury();
       parent::init(); // TODO: Change the autogenerated stub
   }

    public function getVetDocumentList ($GUID)
    {
        $result = null;
        try {
        $client = $this->getSoapClient('mercury');
        $request = new submitApplicationRequest();
        $request->apiKey = $this->apiKey;
        $request->application = new Application();
        $request->application->serviceId = 
        $result = $client->GetCountryByGuidRequest($request);

        if($result != null)
            $cache->add('Country_'.$GUID, $result, 60*60*24*7);


        }catch (\SoapFault $e) {
            var_dump($e->faultcode, $e->faultstring, $e->faultactor, $e->detail, $e->_name, $e->headerfault);
        }
        return $result;
    }

    public function getVetDocumentList($status)
    {
        $client = $this->getSoapClient('mercury');
        $result = null;

        try {
            //Готовим запрос
            $request = new submitApplicationRequest();
            $request->apiKey = $this->apiKey;
            $application = new application();
            $application->serviceId = $this->service_id;
            $application->issuerId = $this->issuerID;
            $application->issueDate = Yii::$app->formatter->asDate('now', 'yyyy-MM-dd').'T'.Yii::$app->formatter->asTime('now', 'HH:mm:ss');

            //Проставляем id запроса
            $localTransactionId = $this->getLocalTransactionId(__FUNCTION__);

            //Формируем тело запроса
            $vetDoc = new getVetDocumentListRequest();
            $vetDoc->status = $status;
            $vetDoc->localTransactionId = $localTransactionId;
            $vetDoc->setEnterpriseGuid($this->enterpriseGuid);
            $vetDoc->setInitiator($this->vetisLogin);
            $application->addData($vetDoc);
            $request->setApplication($application);

            /*var_dump(htmlentities($request->getXML()));
            die();*/

            //Делаем запрос
            $request = $request->getXML();
            $response = $client->__doRequest($request, $this->wsdls['mercury']['Endpoint_URL'], 'submitApplicationRequest', SOAP_1_1);

            /*var_dump(htmlentities($response));
            die();*/

            $result = $this->parseResponse($response);

            if(isset($result->envBody->envFault)) {
                throw new BadRequestHttpException();
            }

            //timeout перед запросом результата
            sleep(2);
            //Получаем результат запроса
            $response = $this->getReceiveApplicationResult($result->envBody->submitApplicationResponse->application->applicationId);

            $result = $this->parseResponse($response);

            //Пишем лог
            $this->addEventLog($result->envBody->receiveApplicationResultResponse, __FUNCTION__, $localTransactionId, $request, $response);


        }catch (\SoapFault $e) {
            var_dump($e->faultcode, $e->faultstring, $e->faultactor, $e->detail, $e->_name, $e->headerfault);
        }
        return $result;
    }

    public function getVetDocumentChangeList($date_start)
    {
        $client = $this->getSoapClient('mercury');
        $result = null;

        try {
            //Готовим запрос
            $request = new submitApplicationRequest();
            $request->apiKey = $this->apiKey;
            $application = new application();
            $application->serviceId = $this->service_id;
            $application->issuerId = $this->issuerID;
            $application->issueDate = Yii::$app->formatter->asDate('now', 'yyyy-MM-dd').'T'.Yii::$app->formatter->asTime('now', 'HH:mm:ss');

            //Проставляем id запроса
            $localTransactionId = $this->getLocalTransactionId(__FUNCTION__);

            //Формируем тело запроса
            $vetDoc = new getVetDocumentChangeListRequest();
            $vetDoc->date_end = time();
            $vetDoc->date_start = $date_start;
            $vetDoc->localTransactionId = $localTransactionId;
            $vetDoc->setEnterpriseGuid($this->enterpriseGuid);
            $vetDoc->setInitiator($this->vetisLogin);
            $application->addData($vetDoc);
            $request->setApplication($application);

            /*var_dump(htmlentities($request->getXML()));
            die();*/

            //Делаем запрос
            $request = $request->getXML();
            $response = $client->__doRequest($request, $this->wsdls['mercury']['Endpoint_URL'], 'submitApplicationRequest', SOAP_1_1);

            /* var_dump(htmlentities($response));
             die();*/

            $result = $this->parseResponse($response);

            if(isset($result->envBody->envFault)) {
                throw new BadRequestHttpException();
            }

            $app_id = $result->envBody->submitApplicationResponse->application->applicationId;
            do {
                //timeout перед запросом результата
                sleep(1);
                //Получаем результат запроса
                $response = $this->getReceiveApplicationResult($app_id);

                $result = $this->parseResponse($response);

                $status = $result->envBody->receiveApplicationResultResponse->application->status->__toString();
            }
            while ($status == 'IN_PROCESS');

            //Пишем лог
            $this->addEventLog($result->envBody->receiveApplicationResultResponse, __FUNCTION__, $localTransactionId, $request, $response);


        }catch (\SoapFault $e) {
            var_dump($e->faultcode, $e->faultstring, $e->faultactor, $e->detail, $e->_name, $e->headerfault);
        }
        return $result;
    }

    public function getReceiveApplicationResult ($applicationId)
    {
        $client = $this->getSoapClient('mercury');
        $request = new receiveApplicationResultRequest();
        $request->apiKey = $this->apiKey;
        $request->issuerId = $this->issuerID;
        $request->applicationId = $applicationId;
        return $client->__doRequest($request->getXML(), $this->wsdls['mercury']['Endpoint_URL'], 'receiveApplicationResultRequest', SOAP_1_1);
    }

    private function addEventLog ($response, $method, $localTransactionId, $request, $response_xml)
    {
        //Пишем лог
        $log = new mercLog();
        $log->applicationId = $response->application->applicationId->__toString();
        $log->status = $response->application->status->__toString();
        $log->action = $method;
        $log->localTransactionId =  $localTransactionId;
        $log->request = $request;
        $log->response = $response_xml;

        if($log->status == mercLog::REJECTED) {
            $log->description = json_encode($response->application->errors, JSON_UNESCAPED_UNICODE);
        }

        if (!$log->save())
            var_dump($log->getErrors());
    }

    public function getVetDocumentByUUID($UUID)
    {
        $cache = Yii::$app->cache;
        $doc = $cache->get('vetDocRaw_'.$UUID);

        if (!($doc === false)) {
            //var_dump(2);
            return $this->parseResponse($doc, true);
        }

        $client = $this->getSoapClient('mercury');
        $result = null;

        try {
            //Готовим запрос
            $request = new submitApplicationRequest();
            $request->apiKey = $this->apiKey;
            $application = new application();
            $application->serviceId = $this->service_id;
            $application->issuerId = $this->issuerID;
            $application->issueDate = Yii::$app->formatter->asDate('now', 'yyyy-MM-dd').'T'.Yii::$app->formatter->asTime('now', 'HH:mm:ss');

            //Проставляем id запроса
            $localTransactionId = $this->getLocalTransactionId(__FUNCTION__);

            //Формируем тело запроса
            $vetDoc = new getVetDocumentByUUIDRequest();
            $vetDoc->localTransactionId = $localTransactionId;
            $vetDoc->setEnterpriseGuid($this->enterpriseGuid);
            $vetDoc->setInitiator($this->vetisLogin);
            $vetDoc->UUID = $UUID;
            $application->addData($vetDoc);
            $request->setApplication($application);

            //Делаем запрос
            $request = $request->getXML($UUID);
            $response = $client->__doRequest($request, $this->wsdls['mercury']['Endpoint_URL'], 'submitApplicationRequest', SOAP_1_1);

            $result = $this->parseResponse($response);

            if(isset($result->envBody->envFault)) {
                throw new BadRequestHttpException();
            }

            //timeout перед запросом результата
            sleep(2);
            //Получаем результат запроса
            $response = $this->getReceiveApplicationResult($result->envBody->submitApplicationResponse->application->applicationId);
            $result = $this->parseResponse($response);

            //Пишем лог
            $this->addEventLog($result->envBody->receiveApplicationResultResponse, __FUNCTION__, $localTransactionId, $request, $response);

            if(isset($result->envBody->envFault)) {
                throw new BadRequestHttpException();
            }

            if($result->envBody->receiveApplicationResultResponse->application->status->__toString() == 'COMPLETED') {
                $result = $result->envBody->receiveApplicationResultResponse->application->result->ns1getVetDocumentByUuidResponse->ns2vetDocument;
                $cache->add('vetDocRaw_' . $UUID, $result->asXML(), 60 * 5);
            }
            else
                $result = null;

        }catch (\SoapFault $e) {
            var_dump($e->faultcode, $e->faultstring, $e->faultactor, $e->detail, $e->_name, $e->headerfault);
        }
        return $result;
    }

    public function getVetDocumentDone($UUID, $rejectedData = null)
    {
        $client = $this->getSoapClient('mercury');
        $result = null;

        try {
            //Готовим запрос
            $request = new submitApplicationRequest();
            $request->apiKey = $this->apiKey;
            $application = new application();
            $application->serviceId = $this->service_id;
            $application->issuerId = $this->issuerID;
            $application->issueDate = Yii::$app->formatter->asDate('now', 'yyyy-MM-dd').'T'.Yii::$app->formatter->asTime('now', 'HH:mm:ss');

            //Проставляем id запроса
            $localTransactionId = $this->getLocalTransactionId(__FUNCTION__);

            //Формируем тело запроса
            $vetDoc = new vetDocumentDone();
            $vetDoc->login = $this->vetisLogin;
            $vetDoc->UUID = $UUID;
            $vetDoc->rejected_data = $rejectedData;

            if($rejectedData == null)
                $vetDoc->type = vetDocumentDone::ACCEPT_ALL;
            else
                $vetDoc->type = $rejectedData['decision'];

            $vetDoc->doc = (new getVetDocumentByUUIDRequest())->getDocumentByUUID($UUID, true);
            $vetDoc->localTransactionId = $localTransactionId;
            $application->addData($vetDoc);
            $request->setApplication($application);

            /*var_dump(htmlentities($request->getXML()));
            die();*/
            //Делаем запрос
            $request = $request->getXML();

            $response = $client->__doRequest($request, $this->wsdls['mercury']['Endpoint_URL'], 'submitApplicationRequest', SOAP_1_1);

            $result = $this->parseResponse($response);

            if(isset($result->envBody->envFault)) {
                echo "Bad request";
                die();
            }

            //timeout перед запросом результата
            sleep(2);
            //Получаем результат запроса
            $response = $this->getReceiveApplicationResult($result->envBody->submitApplicationResponse->application->applicationId);
            $result = $this->parseResponse($response);

            //Пишем лог
            $this->addEventLog($result->envBody->receiveApplicationResultResponse, __FUNCTION__, $localTransactionId, $request, $response);

            if($result->envBody->receiveApplicationResultResponse->application->status->__toString() == 'COMPLETED') {
                $result = true;
            }
            else
                $result = false;


        }catch (\SoapFault $e) {
            var_dump($e->faultcode, $e->faultstring, $e->faultactor, $e->detail, $e->_name, $e->headerfault);
        }
        return $result;
    }

}